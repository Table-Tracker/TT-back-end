// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TableTracker.Infrastructure;

namespace TableTracker.Infrastructure.Migrations
{
    [DbContext(typeof(TableDbContext))]
    partial class TableDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("CuisineRestaurant", b =>
                {
                    b.Property<long>("CuisinesId")
                        .HasColumnType("bigint");

                    b.Property<long>("RestaurantsId")
                        .HasColumnType("bigint");

                    b.HasKey("CuisinesId", "RestaurantsId");

                    b.HasIndex("RestaurantsId");

                    b.ToTable("CuisineRestaurant");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Cuisine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CuisineName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CuisineName")
                        .IsUnique();

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Franchise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Layout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<byte>("LayoutData")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Layouts");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("TableId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfOpening")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<long>("FranchiseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LayoutId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MainImageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Menu")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfTables")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("PriceRange")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("VisitorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("MainImageId")
                        .IsUnique();

                    b.HasIndex("VisitorId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.RestaurantVisitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AverageMoneySpent")
                        .HasColumnType("double");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<float>("RestaurantRate")
                        .HasColumnType("float");

                    b.Property<int>("TimesVisited")
                        .HasColumnType("int");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("VisitorId");

                    b.ToTable("RestaurantVisitors");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Table", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<double>("TableSize")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.VisitorHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorHistorys");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Manager", b =>
                {
                    b.HasBaseType("TableTracker.Domain.Entities.User");

                    b.Property<int>("ManagerState")
                        .HasColumnType("int");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Visitor", b =>
                {
                    b.HasBaseType("TableTracker.Domain.Entities.User");

                    b.Property<float>("GeneralTrustFactor")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Visitor");
                });

            modelBuilder.Entity("CuisineRestaurant", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Cuisine", null)
                        .WithMany()
                        .HasForeignKey("CuisinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTracker.Domain.Entities.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Image", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Restaurant", null)
                        .WithMany("Images")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Layout", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Restaurant", "Restaurant")
                        .WithOne("Layout")
                        .HasForeignKey("TableTracker.Domain.Entities.Layout", "RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTracker.Domain.Entities.Visitor", "Visitor")
                        .WithMany("Reservations")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Restaurant", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Franchise", "Franchise")
                        .WithMany("Restaurants")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TableTracker.Domain.Entities.Image", "MainImage")
                        .WithOne()
                        .HasForeignKey("TableTracker.Domain.Entities.Restaurant", "MainImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TableTracker.Domain.Entities.Visitor", null)
                        .WithMany("Favourites")
                        .HasForeignKey("VisitorId");

                    b.Navigation("Franchise");

                    b.Navigation("MainImage");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.RestaurantVisitor", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTracker.Domain.Entities.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Table", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.User", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Image", "Avatar")
                        .WithOne()
                        .HasForeignKey("TableTracker.Domain.Entities.User", "AvatarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.VisitorHistory", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTracker.Domain.Entities.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Manager", b =>
                {
                    b.HasOne("TableTracker.Domain.Entities.Restaurant", "Restaurant")
                        .WithOne("Manager")
                        .HasForeignKey("TableTracker.Domain.Entities.Manager", "RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Franchise", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Layout");

                    b.Navigation("Manager");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Table", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("TableTracker.Domain.Entities.Visitor", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
